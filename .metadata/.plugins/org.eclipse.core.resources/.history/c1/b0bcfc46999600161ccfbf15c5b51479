package util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import db.User;


/*
 *提供向服务器发送数据与从服务器获取数据的方法 
 */

public class HttpUtil {

	//发送请求从服务器获取数据，在onfinish中队数据进行处理
	public static void sendHttpGetRequest(final String address, final HttpCallBackListener listener){
		new Thread(new Runnable(){//耗时操作开启子线程
			@Override
			public void run() {
				HttpURLConnection connection = null;
				try{
					URL url = new URL(address);
					connection = (HttpURLConnection)url.openConnection();
					connection.setRequestMethod("GET");
					connection.setReadTimeout(8000);
					connection.setConnectTimeout(8000);
										
					//处理响应数据
					InputStream in = connection.getInputStream();
					BufferedReader reader = new BufferedReader(new InputStreamReader(in));
					StringBuilder response = new StringBuilder();
					String line = null;
					while((line = reader.readLine())!= null){
						response.append(line);
					}
					//调用sendHttpReaquest方法时传入的new HttpCallbackListener参数中重写onFinish与onError方法
					if(listener != null){
						//回调onFinish方法
						listener.onFinish(response.toString());
					}
				}catch(Exception e){
					if(listener != null){
						//回调onError方法
						listener.onError(e);
					}					
				}finally{
					//finally 结构使代码总会执行，而不管有无异常发生。使用 finally 可以维护对象的内部状态，并可以清理非内存资源
					if(connection != null){
						connection.disconnect();
					}
				}							
			}			
		}).start();
	}
	
	
	//向服务器的文件中提交json数据，传入一个User对象作为参数
	public static void sendHttpPostRequest(final String address, final String params,final HttpCallBackListener listener){
		
		//主线程转圈
		
		new Thread(new Runnable(){
			@Override
			public void run() {
				HttpURLConnection connection = null;
				new Thread(new Runnable() {
		            @Override
		            public void run() {
		                HttpURLConnection connection = null;

		                try {
		                    URL url = new URL(address);
		                    connection = (HttpURLConnection) url.openConnection();
		                    connection.setDoOutput(true);
		                    connection.setDoInput(true);
		                    connection.setRequestMethod("POST");
		                    connection.setUseCaches(false);
		                    connection.setInstanceFollowRedirects(true);
		                    connection.setConnectTimeout(8000);
		                    connection.setReadTimeout(8000);

		                    connection.connect();
		                    DataOutputStream out = new DataOutputStream(connection
		                            .getOutputStream());


		                    out.writeBytes(params);

		                    out.flush();
		                    out.close();

		                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		                    StringBuilder response = new StringBuilder();
		                    String line;

		                    while ((line = reader.readLine()) != null){
		                        response.append(line);
		                    }


		                    if(listenser != null){
		                        listenser.onFinish(response.toString());
		                    }
		                } catch (Exception e) {
		                    if(listenser != null){
		                        listenser.OnError(e);
		                    }
		                    e.printStackTrace();
		                } finally {
		                    if(connection != null){
		                        connection.disconnect();
		                    }
		                }
		            }
		        }).start();
		    }
		

		}
}
